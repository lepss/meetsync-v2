datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
  provider        = "prisma-client-js"

}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Application
model User {
  id                      String    @id @default(cuid())
  firstname               String?
  lastname                String?
  email                   String?   @unique
  emailVerified           DateTime?
  image                   String?
  username                String @default("default")
  bio                     String?
  link                    String?
  createdAt               DateTime @default(now())

  accounts                Account[]
  sessions                Session[]
  events                  Event[]
  company                 Company[]
  appointmentSessions     AppointmentSession[]
  appointmentRequests     AppointmentRequest[]
}

model Company {
  id          String    @id @default(cuid())
  name        String
  country     String
  city        String
  website     String?
  userId      String
  user        User   @relation(fields: [userId], references: [id])
}

model Event {
  id                    String    @id @default(cuid())
  name                  String
  description           String?
  location              String
  appointment_duration  Int
  break_duration        Int
  created_at            DateTime @default(now())
  image                 String?
  userId                String
  user                  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventDays             EventDay[]
  appointmentSessions   AppointmentSession[]
}

model EventDay {
  id                String    @id @default(cuid())
  start_time        DateTime
  end_time          DateTime
  lunch_start_time  DateTime?
  lunch_end_time    DateTime?
  eventId           String
  event             Event  @relation(fields: [eventId], references: [id])
}

model AppointmentSession {
  id                    String       @id @default(cuid())
  description           String?
  created_at            DateTime  @default(now())
  eventId               String
  userId                String
  event                 Event     @relation(fields: [eventId], references: [id])
  user                  User      @relation(fields: [userId], references: [id])
  appointmentRequests   AppointmentRequest[]
  appointment           Appointment[]
}

model AppointmentRequest {
  id                   String    @id @default(cuid())
  request              String
  created_at           DateTime @default(now())
  accepted_status      Boolean  @default(false)
  userId               String
  appointmentSessionId String
  user                 User @relation(fields: [userId], references: [id])
  appointmentSession   AppointmentSession @relation(fields: [appointmentSessionId], references: [id])
  appointment          Appointment[]
}

model Appointment {
  id                    String    @id @default(cuid())
  date_start            DateTime
  date_end              DateTime
  appointmentRequestId  String
  appointmentSessionId  String
  appointmentRequest    AppointmentRequest @relation(fields: [appointmentRequestId], references: [id])
  appointmentSession    AppointmentSession @relation(fields: [appointmentSessionId], references: [id])
}
